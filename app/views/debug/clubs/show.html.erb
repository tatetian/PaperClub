<!--- TODO: update collection automatically when a model is destroyed --->

<!-- Club info -->
<div id="club-view">
</div>
<!-- Upload -->
<div id="uploader">
  <input id="upload-btn" type="submit" value="Upload"></input>
</div>
<!-- Search -->
<div id="search">
  <div id="users"></div>
  <div id="tags"></div>
  <input type="search" placeholder='Type keywords to search papers in club' style="width: 250px;"></input>
</div>
<!-- Papers -->
<div>
  <h1>Papers:</h1>
  <ul id="paper-list">
  </ul>
</div>
<script type="text/template" id="paper-view-template">
  <p><strong>Title</strong>: 
    <a href="/debug/papers/<%%= id %>">
      <span><%%= title %></span></p>
    </a>
  <p><strong>Pub date</strong>: <span><%%= pub_date %></span></p>
  <p><strong>Tags</strong>: 
  <%% _.each(tags, function(tag, index) { %>
      <span>
        <%%= tag.name %>
      </span>
      <%% }); %>
  </p>
  <input type="button" class="deletePaper" value="Delete Paper" />
</script>
<script type="text/template" id="club-view-template">
  <h1><%%= name %></h1>
</script>
<script type="text/javascript">
var CLUB_ID = <%= @club_id %>;
$(function() {
  /*==================== Club =====================*/
  var Club = Backbone.Model.extend({
    urlRoot: "/api/clubs" 
  });
  var ClubView = Backbone.View.extend({
    el: "#club-view", 
    template: _.template($("#club-view-template").html()),
    initialize: function() {
      this.model.on('change', this.render, this);
      this.model.fetch();
    },
    render: function() 
    {
      this.$el.empty();
      var json = this.model.toJSON();
      this.$el.append(this.template(json));
      return this;
    }
  });
  var club = new Club({id: CLUB_ID});
  var clubView = new ClubView({model: club});
  /*=================== Paper =======================*/
  var Paper = Backbone.Model.extend({
    'urlRoot': '/api/papers/',
    initialize: function() {
      this.on("destory", function(model, collection, options) {
        //collection.remove(model);
      }, this);
    }
  });
  var Papers = Backbone.Collection.extend({
    model: Paper,
    url: '/api/clubs/' + CLUB_ID + '/papers',
    search: function(args) {
      // Append args to the end of url
      this.fetch({data: args})
    }
  });
  var PaperView = Backbone.View.extend({
    tagName: 'li',
    initialize: function() {    
    },
    events: {
      'click input[type=button]': 'deletePaper'
    },
    template: _.template($("#paper-view-template").html()),
    render: function() {
      this.$el.empty();
      var json = this.model.toJSON();
      this.$el.append(this.template(json));
      return this;
    },
    deletePaper: function() {
      var model = this.model,
      collection = model.collection;
      model.destroy();
      collection.remove(model);
    }
  });
  var PapersView = Backbone.View.extend({
    el: "#paper-list",
    initialize: function() {
      var that = this;
      this.collection.bind('add', that.addOne, that);
      this.collection.bind('reset', that.addAll, that);
      this.collection.fetch();
    },
    addOne: function(model, that, options) {
      var paperView = new PaperView({model: model});
      this.$el.append(paperView.render().$el)
    },
    addAll: function() {
      this.$el.empty();
      this.collection.each(this.addOne, this);      
    }
  });
  var papers = new Papers();
  var papersView = new PapersView({collection: papers});
  /*=================== Uploader =======================*/
  var UploaderView = Backbone.View.extend({
    el: "#uploader",
    initialize: function() {
      var uploader = this.uploader = new plupload.Uploader({
        runtimes : 'html5',
        browse_button : 'upload-btn',
        container: 'uploader',
        max_file_size : '10mb',
        url : '/api/clubs/' + CLUB_ID + '/papers',
        multipart_params: {
          
        },
        filters : [
            {title : "PDF files", extensions : "pdf"}
        ]
      });  
      uploader.init();
      uploader.bind('FilesAdded', function(up, files) {
        $.each(files, function(i, file) {
          uploader.start();
        });
      });
      uploader.bind('FileUploaded', function(up, file, result) {
        //var response = JSON.parse(result.response),
        //papers.create()
        papers.fetch();
      });

    }
  });
  var uploader = new UploaderView();
  /*=================== Search ================*/
  var SearchView = Backbone.View.extend({
    el: "#search",
    events: {
    },
    initialize: function() {
      this.$("input[type=search]").on('search', function(e) {
        var keywords = e.target.value;
        if(keywords)
          papers.search({ keywords: keywords })
        else
          papers.search();
      });
    }
  });  
  var searchView = new SearchView();
});
</script>
